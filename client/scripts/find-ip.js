#!/usr/bin/env node

const os = require('os');
const fs = require('fs');
const path = require('path');

/**
 * Find the local IP address of the machine
 */
function findLocalIP() {
  const interfaces = os.networkInterfaces();
  const ips = [];
  
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      // Skip internal (loopback) and non-IPv4 addresses
      if (interface.family === 'IPv4' && !interface.internal) {
        ips.push({
          interface: name,
          address: interface.address,
          netmask: interface.netmask
        });
      }
    }
  }
  
  return ips;
}

/**
 * Update the .env file with the new IP address
 */
function updateEnvFile(ipAddress) {
  const envPath = path.join(__dirname, '..', '.env');
  const serverUrl = `http://${ipAddress}:5000`;

  let envContent = '';

  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');

    // Update existing EXPO_PUBLIC_SERVER_URL
    if (envContent.includes('EXPO_PUBLIC_SERVER_URL=')) {
      envContent = envContent.replace(
        /EXPO_PUBLIC_SERVER_URL=.*/,
        `EXPO_PUBLIC_SERVER_URL=${serverUrl}`
      );
    } else {
      envContent += `\nEXPO_PUBLIC_SERVER_URL=${serverUrl}\n`;
    }
  } else {
    envContent = `# Server Configuration
# Auto-generated by find-ip.js script
EXPO_PUBLIC_SERVER_URL=${serverUrl}
`;
  }

  fs.writeFileSync(envPath, envContent);
  console.log(`✅ Updated .env file with server URL: ${serverUrl}`);
}

/**
 * Update the config/api.js file with the new IP address
 */
function updateConfigFile(ipAddress) {
  const configPath = path.join(__dirname, '..', 'config', 'api.js');

  if (fs.existsSync(configPath)) {
    let configContent = fs.readFileSync(configPath, 'utf8');

    // Update the SERVER_IP constant
    configContent = configContent.replace(
      /const SERVER_IP = '[^']*';/,
      `const SERVER_IP = '${ipAddress}';`
    );

    fs.writeFileSync(configPath, configContent);
    console.log(`✅ Updated config/api.js with IP: ${ipAddress}`);
  }
}

/**
 * Main function
 */
function main() {
  console.log('🔍 Finding local IP addresses...\n');
  
  const ips = findLocalIP();
  
  if (ips.length === 0) {
    console.log('❌ No network interfaces found!');
    console.log('Make sure you are connected to a network.');
    process.exit(1);
  }
  
  console.log('📡 Available network interfaces:');
  ips.forEach((ip, index) => {
    console.log(`${index + 1}. ${ip.interface}: ${ip.address} (${ip.netmask})`);
  });
  
  // If there's only one IP, use it automatically
  if (ips.length === 1) {
    console.log(`\n🎯 Using IP address: ${ips[0].address}`);
    updateEnvFile(ips[0].address);
    updateConfigFile(ips[0].address);
  } else {
    // Sort IPs by priority: Wi-Fi/Ethernet first, then non-virtual, then virtual
    const sortedIps = ips.sort((a, b) => {
      const aIsWiFi = a.interface.toLowerCase().includes('wi-fi') ||
                      a.interface.toLowerCase().includes('ethernet') ||
                      a.interface.toLowerCase().includes('en0') ||
                      a.interface.toLowerCase().includes('wlan');
      const bIsWiFi = b.interface.toLowerCase().includes('wi-fi') ||
                      b.interface.toLowerCase().includes('ethernet') ||
                      b.interface.toLowerCase().includes('en0') ||
                      b.interface.toLowerCase().includes('wlan');

      if (aIsWiFi && !bIsWiFi) return -1;
      if (!aIsWiFi && bIsWiFi) return 1;

      const aIsVirtual = a.interface.toLowerCase().includes('hyper-v') ||
                         a.interface.toLowerCase().includes('wsl') ||
                         a.interface.toLowerCase().includes('virtual') ||
                         a.interface.toLowerCase().includes('vmware');
      const bIsVirtual = b.interface.toLowerCase().includes('hyper-v') ||
                         b.interface.toLowerCase().includes('wsl') ||
                         b.interface.toLowerCase().includes('virtual') ||
                         b.interface.toLowerCase().includes('vmware');

      if (!aIsVirtual && bIsVirtual) return -1;
      if (aIsVirtual && !bIsVirtual) return 1;

      return 0;
    });

    const mainIP = sortedIps[0];
    
    console.log(`\n🎯 Auto-selected IP address: ${mainIP.address} (${mainIP.interface})`);
    console.log('💡 If this is not correct, manually update the .env file');
    updateEnvFile(mainIP.address);
    updateConfigFile(mainIP.address);
  }
  
  console.log('\n📋 Next steps:');
  console.log('1. Start your server: cd ../server && python app.py');
  console.log('2. Make sure your mobile device is on the same network');
  console.log('3. Start the client: npm start or expo start');
  console.log('\n🔄 Run this script again if you change networks!');
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { findLocalIP, updateEnvFile };
