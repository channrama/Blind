#!/usr/bin/env python3

import socket
import subprocess
import platform
import re
import os

def get_local_ip():
    """Get the local IP address of the machine"""
    try:
        # Create a socket connection to determine the local IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            # Connect to a remote address (doesn't have to be reachable)
            s.connect(('8.8.8.8', 80))
            local_ip = s.getsockname()[0]
            return local_ip
    except Exception as e:
        print(f"Error getting local IP: {e}")
        return None

def get_all_network_interfaces():
    """Get all network interfaces and their IP addresses"""
    interfaces = []
    system = platform.system().lower()
    
    try:
        if system == "windows":
            # Use ipconfig on Windows
            result = subprocess.run(['ipconfig'], capture_output=True, text=True)
            output = result.stdout
            
            # Parse ipconfig output
            current_interface = None
            for line in output.split('\n'):
                line = line.strip()
                if 'adapter' in line.lower() and ':' in line:
                    current_interface = line.split(':')[0].replace('adapter', '').strip()
                elif 'IPv4 Address' in line and current_interface:
                    ip_match = re.search(r'(\d+\.\d+\.\d+\.\d+)', line)
                    if ip_match:
                        ip = ip_match.group(1)
                        if not ip.startswith('127.'):  # Skip loopback
                            interfaces.append({
                                'interface': current_interface,
                                'ip': ip
                            })
        else:
            # Use ifconfig on Unix-like systems
            result = subprocess.run(['ifconfig'], capture_output=True, text=True)
            output = result.stdout
            
            # Parse ifconfig output
            current_interface = None
            for line in output.split('\n'):
                line = line.strip()
                if line and not line.startswith(' '):
                    current_interface = line.split(':')[0]
                elif 'inet ' in line and current_interface:
                    ip_match = re.search(r'inet (\d+\.\d+\.\d+\.\d+)', line)
                    if ip_match:
                        ip = ip_match.group(1)
                        if not ip.startswith('127.'):  # Skip loopback
                            interfaces.append({
                                'interface': current_interface,
                                'ip': ip
                            })
    except Exception as e:
        print(f"Error getting network interfaces: {e}")
    
    return interfaces

def update_client_env(ip_address):
    """Update the client's .env file with the new IP address"""
    client_env_path = os.path.join(os.path.dirname(__file__), '..', 'client', '.env')
    server_url = f"http://{ip_address}:5000"

    env_content = ""

    if os.path.exists(client_env_path):
        with open(client_env_path, 'r') as f:
            env_content = f.read()

        # Update existing EXPO_PUBLIC_SERVER_URL
        if 'EXPO_PUBLIC_SERVER_URL=' in env_content:
            env_content = re.sub(
                r'EXPO_PUBLIC_SERVER_URL=.*',
                f'EXPO_PUBLIC_SERVER_URL={server_url}',
                env_content
            )
        else:
            env_content += f"\nEXPO_PUBLIC_SERVER_URL={server_url}\n"
    else:
        env_content = f"""# Server Configuration
# Auto-generated by find_ip.py script
EXPO_PUBLIC_SERVER_URL={server_url}
"""

    try:
        with open(client_env_path, 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Updated client .env file with server URL: {server_url}")
        return True
    except Exception as e:
        print(f"‚ùå Error updating client .env file: {e}")
        return False

def update_client_config(ip_address):
    """Update the client's config/api.js file with the new IP address"""
    config_path = os.path.join(os.path.dirname(__file__), '..', 'client', 'config', 'api.js')

    if not os.path.exists(config_path):
        print(f"‚ö†Ô∏è Config file not found: {config_path}")
        return False

    try:
        with open(config_path, 'r') as f:
            config_content = f.read()

        # Update the SERVER_IP constant
        config_content = re.sub(
            r"const SERVER_IP = '[^']*';",
            f"const SERVER_IP = '{ip_address}';",
            config_content
        )

        with open(config_path, 'w') as f:
            f.write(config_content)

        print(f"‚úÖ Updated client config/api.js with IP: {ip_address}")
        return True
    except Exception as e:
        print(f"‚ùå Error updating client config file: {e}")
        return False

def main():
    print("üîç Finding local IP addresses...\n")
    
    # Get the primary IP address
    primary_ip = get_local_ip()
    
    # Get all network interfaces
    interfaces = get_all_network_interfaces()
    
    if primary_ip:
        print(f"üéØ Primary IP address: {primary_ip}")
    
    if interfaces:
        print("\nüì° All available network interfaces:")
        for i, interface in enumerate(interfaces, 1):
            print(f"{i}. {interface['interface']}: {interface['ip']}")
    
    # Use primary IP if available, otherwise use first interface
    selected_ip = primary_ip
    if not selected_ip and interfaces:
        selected_ip = interfaces[0]['ip']
    
    if not selected_ip:
        print("‚ùå No network interfaces found!")
        print("Make sure you are connected to a network.")
        return
    
    print(f"\nüéØ Using IP address: {selected_ip}")

    # Update client configuration
    env_updated = update_client_env(selected_ip)
    config_updated = update_client_config(selected_ip)

    if env_updated and config_updated:
        print("\nüìã Next steps:")
        print("1. Start the server: python app.py")
        print("2. Make sure your mobile device is on the same network")
        print("3. Start the client: cd ../client && expo start --clear")
        print(f"4. Your server will be accessible at: http://{selected_ip}:5000")
        print("\nüîÑ Run this script again if you change networks!")
    else:
        print(f"\n‚ö†Ô∏è  Couldn't update client configuration automatically.")
        print(f"Please manually update the client/.env file with:")
        print(f"EXPO_PUBLIC_SERVER_URL=http://{selected_ip}:5000")
        print(f"And update client/config/api.js SERVER_IP constant to: {selected_ip}")

if __name__ == "__main__":
    main()
